[defaults]
home=/etc/ansible
inventory=/etc/ansible/inventories/hosts

action_warnings=True
any_errors_fatal=False

# (list) Accept list of cowsay templates that are 'safe' to use, set to empty list if you want to enable all installed templates.
cowsay_enabled_stencils=bud-frogs, bunny, cheese, daemon, default, dragon, elephant-in-snake, elephant, eyes, hellokitty, kitty, luke-koala, meow, milk, moofasa, moose, ren, sheep, small, stegosaurus, stimpy, supermilker, three-eyes, turkey, turtle, tux, udder, vader-koala, vader, www
# (string) Specify a custom cowsay path or swap in your cowsay implementation of choice
cowpath=
cow_selection=default
nocows=False

force_color=True
nocolor=False

# (path) The password file to use for the become plugin. --become-password-file.
# If executable, it will be run and the resulting stdout will be used as the password.
become_password_file=

# note : ansible-galaxy collection list to get the available plugins
become_plugins={{ ANSIBLE_HOME ~ "/plugins/become:/usr/share/ansible/plugins/become" }}
action_plugins={{ ANSIBLE_HOME ~ "/plugins/action:/usr/share/ansible/plugins/action" }}
cache_plugins={{ ANSIBLE_HOME ~ "/plugins/cache:/usr/share/ansible/plugins/cache" }}
callback_plugins={{ ANSIBLE_HOME ~ "/plugins/callback:/usr/share/ansible/plugins/callback" }}
cliconf_plugins={{ ANSIBLE_HOME ~ "/plugins/cliconf:/usr/share/ansible/plugins/cliconf" }}
connection_plugins={{ ANSIBLE_HOME ~ "/plugins/connection:/usr/share/ansible/plugins/connection" }}
filter_plugins={{ ANSIBLE_HOME ~ "/plugins/filter:/usr/share/ansible/plugins/filter" }}
httpapi_plugins={{ ANSIBLE_HOME ~ "/plugins/httpapi:/usr/share/ansible/plugins/httpapi" }}
inventory_plugins={{ ANSIBLE_HOME ~ "/plugins/inventory:/usr/share/ansible/plugins/inventory" }}
lookup_plugins={{ ANSIBLE_HOME ~ "/plugins/lookup:/usr/share/ansible/plugins/lookup" }}
module_utils={{ ANSIBLE_HOME ~ "/plugins/module_utils:/usr/share/ansible/plugins/module_utils" }}
library={{ ANSIBLE_HOME ~ "/plugins/modules:/usr/share/ansible/plugins/modules" }}
netconf_plugins={{ ANSIBLE_HOME ~ "/plugins/netconf:/usr/share/ansible/plugins/netconf" }}
roles_path={{ ANSIBLE_HOME ~ "/roles:/usr/share/ansible/roles:/etc/ansible/roles" }}
strategy_plugins={{ ANSIBLE_HOME ~ "/plugins/strategy:/usr/share/ansible/plugins/strategy" }}
terminal_plugins={{ ANSIBLE_HOME ~ "/plugins/terminal:/usr/share/ansible/plugins/terminal" }}
test_plugins={{ ANSIBLE_HOME ~ "/plugins/test:/usr/share/ansible/plugins/test" }}
vars_plugins={{ ANSIBLE_HOME ~ "/plugins/vars:/usr/share/ansible/plugins/vars" }}

collections_path={{ ANSIBLE_HOME ~ "/collections:/usr/share/ansible/collections" }}
collections_scan_sys_path=True
collections_on_ansible_version_mismatch=warning

enable_plugins=host_list, script, auto, yaml, ini, toml

# (string) Chooses which cache plugin to use, the default 'memory' is ephemeral.
facts_modules=smart
fact_caching=memory
fact_caching_connection= localhost:6379:0
fact_caching_prefix=ansible_facts
fact_caching_timeout=300
fact_path=
gathering=implicit
gather_subset=!hardware,!virtual
gather_timeout=10

callbacks_enabled=
connection_password_file=

allow_unsafe_lookups=False
ask_pass=False
ask_vault_pass=False
debug=False

executable=/bin/sh

force_handlers=False
forks=5

hash_behaviour=replace

internal_poll_interval=0.001

jinja2_extensions=[]
jinja2_native=False

keep_remote_files=False

bin_ansible_callbacks=False

local_tmp={{ ANSIBLE_HOME ~ "/tmp" }}
log_filter=
log_path=/var/log/ansible.log

ansible_managed=Ansible managed
module_args=
module_compression=ZIP_DEFLATED
module_name=command

no_log=False
no_target_syslog=False
null_representation=
poll_interval=15

private_key_file=~/.ansible/.ssh/id_ansible
private_role_vars=False
remote_port=22
remote_user=ansible

stdout_callback=default
strategy=linear

# (pathspec) Colon separated paths in which Ansible will search for Strategy Plugins.

# (boolean) Toggle the use of "su" for tasks.
su=False

# (string) Syslog facility to use when Ansible logs to the remote target
syslog_facility=LOG_USER


# (integer) This is the default timeout for connection plugins to use.
timeout=10

# (string) Default connection plugin to use, the 'smart' option will toggle between 'ssh' and 'paramiko' depending on controller OS and ssh versions
transport=smart

# (boolean) When True, this causes ansible templating to fail steps that reference variable names that are likely typoed.
# Otherwise, any '{{ template_expression }}' that contains undefined variables will be rendered in a template or ansible action line exactly as written.
error_on_undefined_vars=True

# (pathspec) Colon separated paths in which Ansible will search for Vars Plugins.

vault_encrypt_identity=
vault_identity=default
vault_identity_list=
vault_id_match=False
vault_password_file=~/.ansible/.vault/passwd.vault

# (integer) Sets the default verbosity, equivalent to the number of ``-v`` passed in the command line.
verbosity=0

deprecation_warnings=True
devel_warning=True

display_args_to_stdout=False
display_skipped_hosts=True

docsite_root_url=https://docs.ansible.com/ansible-core/
doc_fragment_plugins={{ ANSIBLE_HOME ~ "/plugins/doc_fragments:/usr/share/ansible/plugins/doc_fragments" }}

duplicate_dict_key=warn

enable_task_debugger=False
error_on_missing_handler=True

# (list) Which modules to run during a play's fact gathering stage, using the default of 'smart' will try to figure it out based on connection type.
# If adding your own modules but you still want to use the default Ansible facts, you will want to include 'setup' or corresponding network module to the list (if you add 'smart', Ansible will also figure it out).
# This does not affect explicit calls to the 'setup' module, but does always affect the 'gather_facts' action (implicit or explicit).

# (boolean) Set this to "False" if you want to avoid host key checking by the underlying tools Ansible uses to connect to the host
host_key_checking=True

# (boolean) Facts are available inside the `ansible_facts` variable, this setting also pushes them as their own vars in the main namespace.
# Unlike inside the `ansible_facts` dictionary, these will have an `ansible_` prefix.
inject_facts_as_vars=True

# (string) Path to the Python interpreter to be used for module execution on remote targets, or an automatic discovery mode. Supported discovery modes are ``auto`` (the default), ``auto_silent``, ``auto_legacy``, and ``auto_legacy_silent``. All discovery modes employ a lookup table to use the included system Python (on distributions known to include one), falling back to a fixed ordered list of well-known Python interpreter locations if a platform-specific default is not available. The fallback behavior will issue a warning that the interpreter should be set explicitly (since interpreters installed later may change which one is used). This warning behavior can be disabled by setting ``auto_silent`` or ``auto_legacy_silent``. The value of ``auto_legacy`` provides all the same behavior, but for backwards-compatibility with older Ansible releases that always defaulted to ``/usr/bin/python``, will use that interpreter if present.
interpreter_python=auto

# (boolean) If 'false', invalid attributes for a task will result in warnings instead of errors
invalid_task_attribute_failed=True

# (boolean) Toggle to control showing warnings related to running a Jinja version older than required for jinja2_native
jinja2_native_warning=True

# (boolean) By default Ansible will issue a warning when there are no hosts in the inventory.
# These warnings can be silenced by adjusting this setting to False.
localhost_warning=True

# (int) Maximum size of files to be considered for diff display
max_diff_size=104448

# (list) List of extensions to ignore when looking for modules to load
# This is for rejecting script and binary module fallback extensions
module_ignore_exts={{(REJECT_EXTS + ('.yaml', '.yml', '.ini'))}}

# (bool) Enables whether module responses are evaluated for containing non UTF-8 data
# Disabling this may result in unexpected behavior
# Only ansible-core should evaluate this configuration
module_strict_utf8_response=True

# (list) TODO: write it
network_group_modules=eos, nxos, ios, iosxr, junos, enos, ce, vyos, sros, dellos9, dellos10, dellos6, asa, aruba, aireos, bigip, ironware, onyx, netconf, exos, voss, slxos

# (boolean) Previously Ansible would only clear some of the plugin loading caches when loading new roles, this led to some behaviours in which a plugin loaded in previous plays would be unexpectedly 'sticky'. This setting allows to return to that behaviour.
old_plugin_cache_clear=False

# (path) A number of non-playbook CLIs have a ``--playbook-dir`` argument; this sets the default value for it.
playbook_dir=

# (string) This sets which playbook dirs will be used as a root to process vars plugins, which includes finding host_vars/group_vars
playbook_vars_root=top

# (path) A path to configuration for filtering which plugins installed on the system are allowed to be used.
# See :ref:`plugin_filtering_config` for details of the filter file's format.
#  The default is /etc/ansible/plugin_filters.yml
plugin_filters_cfg=

# (string) Attempts to set RLIMIT_NOFILE soft limit to the specified value when executing Python modules (can speed up subprocess usage on Python 2.x. See https://bugs.python.org/issue11284). The value will be limited by the existing hard limit. Default value of 0 does not attempt to adjust existing system-defined limits.
python_module_rlimit_nofile=0

# (bool) This controls whether a failed Ansible playbook should create a .retry file.
retry_files_enabled=False

# (path) This sets the path in which Ansible will save .retry files when a playbook fails and retry files are enabled.
# This file will be overwritten after each run with the list of failed hosts from all plays.
retry_files_save_path=

# (str) This setting can be used to optimize vars_plugin usage depending on user's inventory size and play selection.
run_vars_plugins=demand

# (bool) This adds the custom stats set via the set_stats plugin to the default output
show_custom_stats=False

# (string) Action to take when a module parameter value is converted to a string (this does not affect variables). For string parameters, values such as '1.00', "['a', 'b',]", and 'yes', 'y', etc. will be converted by the YAML parser unless fully quoted.
# Valid options are 'error', 'warn', and 'ignore'.
# Since 2.8, this option defaults to 'warn' but will change to 'error' in 2.12.
string_conversion_action=warn

# (boolean) Allows disabling of warnings related to potential issues on the system running ansible itself (not on the managed hosts)
# These may include warnings about 3rd party packages or other conditions that should be resolved if possible.
system_warnings=True

# (boolean) This option defines whether the task debugger will be invoked on a failed task when ignore_errors=True is specified.
# True specifies that the debugger will honor ignore_errors, False will not honor ignore_errors.
task_debugger_ignore_errors=True

# (integer) Set the maximum time (in seconds) that a task can run for.
# If set to 0 (the default) there is no timeout.
task_timeout=0

# (string) Make ansible transform invalid characters in group names supplied by inventory sources.
force_valid_group_names=never

# (boolean) Toggles the use of persistence for connections.
use_persistent_connections=False

# (bool) A toggle to disable validating a collection's 'metadata' entry for a module_defaults action group. Metadata containing unexpected fields or value types will produce a warning when this is True.
validate_action_group_metadata=True

# (list) Accept list for variable plugins that require it.
vars_plugins_enabled=host_group_vars

# (list) Allows to change the group variable precedence merge order.
precedence=all_inventory, groups_inventory, all_plugins_inventory, all_plugins_play, groups_plugins_inventory, groups_plugins_play

# (string) The salt to use for the vault encryption. If it is not provided, a random salt will be used.
vault_encrypt_salt=

# (bool) Force 'verbose' option to use stderr instead of stdout
verbose_to_stderr=False

# (integer) For asynchronous tasks in Ansible (covered in Asynchronous Actions and Polling), this is how long, in seconds, to wait for the task spawned by Ansible to connect back to the named pipe used on Windows systems. The default is 5 seconds. This can be too low on slower systems, or systems under heavy load.
# This is not the total time an async command can run for, but is a separate timeout to wait for an async command to start. The task will only start to be timed against its async_timeout once it has connected to the pipe, so the overall maximum duration the task can take will be extended by the amount specified here.
win_async_startup_timeout=5

# (list) Check all of these extensions when looking for 'variable' files which should be YAML or JSON or vaulted versions of these.
# This affects vars_files, include_vars, inventory and vars plugins among others.
yaml_valid_extensions=.yml, .yaml, .json


[privilege_escalation]
# (boolean) Display an agnostic become prompt instead of displaying a prompt containing the command line supplied become method
agnostic_become_prompt=True

# (boolean) This setting controls if become is skipped when remote user and become user are the same. I.E root sudo to root.
# If executable, it will be run and the resulting stdout will be used as the password.
become_allow_same_user=False

# (boolean) Toggles the use of privilege escalation, allowing you to 'become' another user after login.
become=False

# (boolean) Toggle to prompt for privilege escalation password.
become_ask_pass=False

# (string) executable to use for privilege escalation, otherwise Ansible will depend on PATH
become_exe=

# (string) Flags to pass to the privilege escalation executable.
become_flags=

# (string) Privilege escalation method to use when `become` is enabled.
become_method=sudo

# (string) The user your login/remote user 'becomes' when using privilege escalation, most systems will use 'root' when no user is specified.
become_user=root


[persistent_connection]
# (path) Specify where to look for the ansible-connection script. This location will be checked before searching $PATH.
# If null, ansible will start with the same directory as the ansible script.
ansible_connection_path=

# (int) This controls the amount of time to wait for response from remote device before timing out persistent connection.
command_timeout=30

# (integer) This controls the retry timeout for persistent connection to connect to the local domain socket.
connect_retry_timeout=15

# (integer) This controls how long the persistent connection will remain idle before it is destroyed.
connect_timeout=30

# (path) Path to socket to be used by the connection persistence system.
control_path_dir={{ ANSIBLE_HOME ~ "/pc" }}


[connection]
# (boolean) This is a global option, each connection plugin can override either by having more specific options or not supporting pipelining at all.
# Pipelining, if supported by the connection plugin, reduces the number of network operations required to execute a module on the remote server, by executing many Ansible modules without actual file transfer.
# It can result in a very significant performance improvement when enabled.
# However this conflicts with privilege escalation (become). For example, when using 'sudo:' operations you must first disable 'requiretty' in /etc/sudoers on all managed hosts, which is why it is disabled by default.
# This setting will be disabled if ``ANSIBLE_KEEP_REMOTE_FILES`` is enabled.
pipelining=False


[colors]
# (string) Defines the color to use on 'Changed' task status
changed=yellow

# (string) Defines the default color to use for ansible-console
console_prompt=white

# (string) Defines the color to use when emitting debug messages
debug=dark gray

# (string) Defines the color to use when emitting deprecation messages
deprecate=purple

# (string) Defines the color to use when showing added lines in diffs
diff_add=green

# (string) Defines the color to use when showing diffs
diff_lines=cyan

# (string) Defines the color to use when showing removed lines in diffs
diff_remove=red

# (string) Defines the color to use when emitting error messages
error=red

# (string) Defines the color to use for highlighting
highlight=white

# (string) Defines the color to use when showing 'OK' task status
ok=green

# (string) Defines the color to use when showing 'Skipped' task status
skip=cyan

# (string) Defines the color to use on 'Unreachable' status
unreachable=bright red

# (string) Defines the color to use when emitting verbose messages. i.e those that show with '-v's.
verbose=blue

# (string) Defines the color to use when emitting warning messages
warn=bright purple


[selinux]
# (boolean) This setting causes libvirt to connect to lxc containers by passing --noseclabel to virsh. This is necessary when running on systems which do not have SELinux.
libvirt_lxc_noseclabel=False

# (list) Some filesystems do not support safe operations and/or return inconsistent errors, this setting makes Ansible 'tolerate' those in the list w/o causing fatal errors.
# Data corruption may occur and writes are not always verified when a filesystem is in the list.
special_context_filesystems=fuse, nfs, vboxsf, ramfs, 9p, vfat


[diff]
# (bool) Configuration toggle to tell modules to show differences when in 'changed' status, equivalent to ``--diff``.
always=False

# (integer) How many lines of context to show when displaying the differences between files.
context=3


[inventory]
# (string) This setting changes the behaviour of mismatched host patterns, it allows you to force a fatal error, a warning or just ignore it
host_pattern_mismatch=warning

# (boolean) If 'true', it is a fatal error when any given inventory source cannot be successfully parsed by any available inventory plugin; otherwise, this situation only attracts a warning.

any_unparsed_is_failed=False

# (bool) Toggle to turn on inventory caching.
# This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
# The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory configuration.
# This message will be removed in 2.16.
cache=False

# (string) The plugin for caching inventory.
# This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
# The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
# This message will be removed in 2.16.
cache_plugin=

# (string) The inventory cache connection.
# This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
# The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
# This message will be removed in 2.16.
cache_connection=

# (string) The table prefix for the cache plugin.
# This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
# The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
# This message will be removed in 2.16.
cache_prefix=ansible_inventory_

# (string) Expiration timeout for the inventory cache plugin data.
# This setting has been moved to the individual inventory plugins as a plugin option :ref:`inventory_plugins`.
# The existing configuration settings are still accepted with the inventory plugin adding additional options from inventory and fact cache configuration.
# This message will be removed in 2.16.
cache_timeout=3600

# (list) List of enabled inventory plugins, it also determines the order in which they are used.

# (bool) Controls if ansible-inventory will accurately reflect Ansible's view into inventory or its optimized for exporting.
export=False

# (list) List of extensions to ignore when using a directory as an inventory source
ignore_extensions={{(REJECT_EXTS + ('.orig', '.ini', '.cfg', '.retry'))}}

# (list) List of patterns to ignore when using a directory as an inventory source
ignore_patterns=

# (bool) If 'true' it is a fatal error if every single potential inventory source fails to parse, otherwise this situation will only attract a warning.

unparsed_is_failed=False

# (boolean) By default Ansible will issue a warning when no inventory was loaded and notes that it will use an implicit localhost-only inventory.
# These warnings can be silenced by adjusting this setting to False.
inventory_unparsed_warning=True


[netconf_connection]
ssh_config=

[paramiko_connection]
host_key_auto_add=False
look_for_keys=True

[jinja2]
dont_type_filters=string, to_json, to_nice_json, to_yaml, to_nice_yaml, ppretty, json

[tags]
run=
skip=

