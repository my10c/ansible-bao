#!/usr/bin/env bash
#
# BSD 3-Clause License
#
# Copyright (©) 1999 - 2011, © PatriotSoft BV / Luc Suryo
# Copyright (©) 2011 - 2023, © Badassops LLC / Luc Suryo
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#*
#* File			:	create_random
#*
#* Description	:	script to create random string based on the given size
#*
#* Author	:	Luc Suryo <luc@badassops.com>
#*
#* Version	:	0.2
#*
#* Date		:	Feb 2, 2012
#*
#* History	:
#* 		Date:			Author:			Info:
#*		Dec 12, 1999	LIS				First Release
#*		Feb 2, 2012		LIS				use functions
#*

_program="${0##*/}"
_author='Luc Suryo'
_copyright="Copyright 1999 - $(date "+%Y") (c) Badassops LLC"
_license='License 3-Clause BSD, https://opensource.org/licenses/BSD-3-Clause ♥'
_version='0.2'
_email='luc@badassops.com'
_summary='Script to create random string based on the given size'
_cancelled="OK : Process has been cancelled on your request."
_info="$_program $_version\n$_copyright\n$_license\n\nWritten by $_author <$_email>\n$_summary\n"

# Set interrupt handler
trap inthandler 1 2 3 4 5 9 10 12 15 23 24 25

# use variable, default to 12
_size=
_min=12

# color :)
# Reset
_color_off='\033[0m'		# Text Reset

# Bold
_color_black='\033[1;30m'	# Black
_color_red='\033[1;31m'		# Red
_color_green='\033[1;32m'	# Green
_color_yellow='\033[1;33m'	# Yellow
_color_blue='\033[1;34m'	# Blue
_color_purple='\033[1;35m'	# Purple
_color_cyan='\033[1;36m'	# Cyan
_color_white='\033[1;37m'	# White

function inthandler() {
	kill -TERM $_spid
	_print_it warning "$_cancelled"
	exit $_state_ok
}

function _print_it() {
	local _info_mode=$1
	shift
	case $_info_mode
	in
		# argument given none color
		ok)			printf "${_color_green}%s${_color_off}\n" "$*" 2>&1 ;;
		warning)	printf "${_color_yellow}%s${_color_off}\n" "$*" 2>&1 ;;
		error)		printf "${_color_red}%s${_color_off}\n" "$*" 2>&1 ;;
		Help)		printf "${_color_yellow}" ; echo -e "$*" ; printf "${_color_off}" 2>&1 ;;
		help)		printf "${_color_cyan}" ; echo -e "$*" ; printf "${_color_off}" 2>&1 ;;
		ignore)		printf "${_color_purple}" ; echo -e "$*" ; printf "${_color_off}" 2>&1 ;;
		# default
		*)			printf "${_color_cyan}%s${_color_off}\n" "$*" 2>&1 ;;
	esac
	return 0
}
	
function help() {
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	_print_it Help "$_info"
	_print_it help "Usage : $_program [-h | -v] size "
	_print_it help " size : how many chars shall the generated string should be"
	_print_it help "		only number and bigger then $_min"
	_print_it help " Options:"
	_print_it help " -h this help page."
	_print_it help " -v Show version."
	exit $1
}

function get_given_options() {
	case "$1" in
		'-v'|'--version')	_print_it version "$_version" ; exit $_state_ok ; ;;
		'-h'|'--help')		help 0 ;; 	# Which includes -h and --help
	esac
	_size=$1
	if [[ -z $_size ]] ; then
		help 1
	fi

	if [[ ! "$_size" =~ ^[0-9]+$ ]] ; then
		help 1
	fi

	if (( $_size <  $_min )) ; then
		_print_it error "Given size it too small, min is $_min"
		help 1
	fi
	return 0
}

function _random() {
	# save none alpha-numeric chars
	chars='@#$%^_+=&\/<>!'
	_div="$(( $1 / 3 - 2 ))"
	# add a special 5 chars
	echo -e "\n"
	(
< /dev/urandom LC_ALL=C tr -dc A-Za-z0-9 | head -c${_div:-${_div}}
	echo ${chars:$((RANDOM % ${#chars})):1}
< /dev/urandom LC_ALL=C tr -dc A-Za-z0-9 | head -c${_div:-${_div}}
	echo ${chars:$((RANDOM % ${#chars})):1}
< /dev/urandom LC_ALL=C tr -dc A-Za-z0-9 | head -c${_div:-${_div}}
	echo ${chars:$((RANDOM % ${#chars})):1}
< /dev/urandom LC_ALL=C tr -dc A-Za-z0-9 | head -c${_div:-${_div}}
	echo ${chars:$((RANDOM % ${#chars})):1}
< /dev/urandom LC_ALL=C tr -dc A-Za-z0-9 | head -c${_div:-${_div}}
	) | shuf | tr -d '\n'
	echo -e "\n"
}

function main() {
	get_given_options $@
	_random $_size
	_var_exit=$?
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	exit $_var_exit
}
main $@
